%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 148 226
%%Creator: yExport 1.4.0.1
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Tuesday, June 2, 2015 7:30:05 PM CST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
148 226 setpagesize
0 0 0 0 setmargins
0 0 setorigin
148 226 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
148.000 0.00000 l
148.000 226.000 l
0.00000 226.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 148 226 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -148.000 -52.0000 ] concat
1.00000 1.00000 1.00000 RG
newpath
148.000 52.0000 m
296.000 52.0000 l
296.000 278.000 l
148.000 278.000 l
148.000 52.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -148.000 -52.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -148.000 -52.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -148.000 -52.0000 ] defaultmatrix matrix concatmatrix setmatrix
1.00000 1.00000 1.00000 RG
newpath
164.000 71.0000 m
164.000 98.0000 l
164.000 100.209 165.791 102.000 168.000 102.000  c
277.000 102.000 l
279.209 102.000 281.000 100.209 281.000 98.0000  c
281.000 71.0000 l
281.000 68.7909 279.209 67.0000 277.000 67.0000  c
168.000 67.0000 l
165.791 67.0000 164.000 68.7909 164.000 71.0000  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
180.568 89.7910 m
180.568 79.6738 l
182.674 79.6738 l
182.674 89.7910 l
h
185.210 89.7910 m
185.210 82.2852 l
187.233 82.2852 l
187.233 83.7002 l
187.894 82.6429 188.746 82.1143 189.790 82.1143  c
190.460 82.1143 190.989 82.3262 191.376 82.7500  c
191.763 83.1738 191.957 83.7526 191.957 84.4863  c
191.957 89.7910 l
189.934 89.7910 l
189.934 84.9854 l
189.934 84.1331 189.651 83.7070 189.086 83.7070  c
188.443 83.7070 187.826 84.1605 187.233 85.0674  c
187.233 89.7910 l
h
194.404 92.4912 m
194.404 82.2852 l
196.428 82.2852 l
196.428 83.7002 l
196.947 82.6429 197.765 82.1143 198.882 82.1143  c
199.784 82.1143 200.494 82.4447 201.011 83.1055  c
201.528 83.7663 201.787 84.6755 201.787 85.8330  c
201.787 87.0908 201.495 88.0934 200.912 88.8408  c
200.329 89.5882 199.547 89.9619 198.567 89.9619  c
197.779 89.9619 197.066 89.6520 196.428 89.0322  c
196.428 92.4912 l
h
196.428 87.8291 m
196.920 88.3760 197.444 88.6494 198.000 88.6494  c
198.497 88.6494 198.893 88.4090 199.189 87.9282  c
199.486 87.4474 199.634 86.8060 199.634 86.0039  c
199.634 84.4681 199.139 83.7002 198.150 83.7002  c
197.553 83.7002 196.979 84.0853 196.428 84.8555  c
h
208.322 89.7910 m
208.322 88.3760 l
207.666 89.4333 206.814 89.9619 205.766 89.9619  c
205.096 89.9619 204.567 89.7500 204.180 89.3262  c
203.792 88.9023 203.599 88.3236 203.599 87.5898  c
203.599 82.2852 l
205.622 82.2852 l
205.622 87.0908 l
205.622 87.9430 205.907 88.3691 206.477 88.3691  c
207.115 88.3691 207.730 87.9157 208.322 87.0088  c
208.322 82.2852 l
210.346 82.2852 l
210.346 89.7910 l
h
216.744 89.7500 m
216.261 89.8913 215.881 89.9619 215.603 89.9619  c
213.848 89.9619 212.971 89.1416 212.971 87.5010  c
212.971 83.5498 l
212.130 83.5498 l
212.130 82.2852 l
212.971 82.2852 l
212.971 81.0205 l
214.994 80.7881 l
214.994 82.2852 l
216.601 82.2852 l
216.601 83.5498 l
214.994 83.5498 l
214.994 87.2344 l
214.994 88.1549 215.370 88.6152 216.122 88.6152  c
216.295 88.6152 216.503 88.5833 216.744 88.5195  c
h
223.163 89.7910 m
223.163 82.2852 l
225.187 82.2852 l
225.187 89.7910 l
h
223.163 81.0205 m
223.163 79.3320 l
225.187 79.3320 l
225.187 81.0205 l
h
227.716 89.7910 m
227.716 82.2852 l
229.657 82.2852 l
229.657 83.7002 l
230.250 82.6429 231.093 82.1143 232.187 82.1143  c
232.752 82.1143 233.216 82.2533 233.581 82.5312  c
233.946 82.8092 234.169 83.1989 234.251 83.7002  c
234.953 82.6429 235.800 82.1143 236.794 82.1143  c
238.166 82.1143 238.852 82.8708 238.852 84.3838  c
238.852 89.7910 l
236.910 89.7910 l
236.910 85.0469 l
236.910 84.1582 236.614 83.7139 236.021 83.7139  c
235.415 83.7139 234.825 84.1514 234.251 85.0264  c
234.251 89.7910 l
232.310 89.7910 l
232.310 85.0469 l
232.310 84.1536 232.011 83.7070 231.414 83.7070  c
230.817 83.7070 230.231 84.1468 229.657 85.0264  c
229.657 89.7910 l
h
244.970 88.9844 m
244.295 89.6361 243.573 89.9619 242.803 89.9619  c
242.146 89.9619 241.613 89.7614 241.203 89.3604  c
240.793 88.9593 240.588 88.4398 240.588 87.8018  c
240.588 86.9723 240.919 86.3332 241.583 85.8843  c
242.246 85.4354 243.195 85.2109 244.430 85.2109  c
244.970 85.2109 l
244.970 84.5273 l
244.970 83.7480 244.525 83.3584 243.637 83.3584  c
242.848 83.3584 242.051 83.5817 241.244 84.0283  c
241.244 82.6338 l
242.160 82.2874 243.067 82.1143 243.965 82.1143  c
245.929 82.1143 246.911 82.8958 246.911 84.4590  c
246.911 87.7812 l
246.911 88.3691 247.100 88.6631 247.479 88.6631  c
247.547 88.6631 247.636 88.6540 247.745 88.6357  c
247.793 89.7705 l
247.365 89.8981 246.986 89.9619 246.658 89.9619  c
245.829 89.9619 245.296 89.6361 245.059 88.9844  c
h
244.970 87.8975 m
244.970 86.3730 l
244.491 86.3730 l
243.183 86.3730 242.529 86.7832 242.529 87.6035  c
242.529 87.8815 242.624 88.1151 242.813 88.3042  c
243.002 88.4933 243.236 88.5879 243.514 88.5879  c
243.988 88.5879 244.473 88.3577 244.970 87.8975  c
h
249.577 92.1221 m
249.741 90.6523 l
250.575 91.0352 251.370 91.2266 252.127 91.2266  c
252.874 91.2266 253.414 91.0671 253.747 90.7480  c
254.080 90.4290 254.246 89.9118 254.246 89.1963  c
254.246 88.1709 l
253.754 89.2510 252.940 89.7910 251.806 89.7910  c
250.912 89.7910 250.204 89.4572 249.680 88.7896  c
249.156 88.1219 248.894 87.2184 248.894 86.0791  c
248.894 84.8805 249.188 83.9201 249.775 83.1978  c
250.363 82.4754 251.145 82.1143 252.120 82.1143  c
252.886 82.1143 253.594 82.4242 254.246 83.0439  c
254.458 82.2852 l
256.276 82.2852 l
256.276 88.0137 l
256.276 89.1576 256.207 89.9824 256.068 90.4883  c
255.929 90.9941 255.659 91.4248 255.258 91.7803  c
254.583 92.3636 253.633 92.6553 252.407 92.6553  c
251.537 92.6553 250.593 92.4775 249.577 92.1221  c
h
254.246 86.9951 m
254.246 84.2266 l
253.758 83.6751 253.248 83.3994 252.715 83.3994  c
252.204 83.3994 251.799 83.6318 251.498 84.0967  c
251.197 84.5615 251.047 85.1859 251.047 85.9697  c
251.047 87.4372 251.519 88.1709 252.462 88.1709  c
253.114 88.1709 253.708 87.7790 254.246 86.9951  c
h
264.869 89.5381 m
263.908 89.8206 262.996 89.9619 262.135 89.9619  c
260.882 89.9619 259.893 89.6064 259.168 88.8955  c
258.443 88.1846 258.081 87.2139 258.081 85.9834  c
258.081 84.8213 258.413 83.8859 259.076 83.1772  c
259.739 82.4686 260.615 82.1143 261.704 82.1143  c
262.802 82.1143 263.604 82.4606 264.110 83.1533  c
264.616 83.8460 264.869 84.9421 264.869 86.4414  c
260.214 86.4414 l
260.351 87.8724 261.137 88.5879 262.572 88.5879  c
263.251 88.5879 264.017 88.4307 264.869 88.1162  c
h
260.187 85.2998 m
262.880 85.2998 l
262.880 84.0192 262.467 83.3789 261.643 83.3789  c
260.804 83.3789 260.319 84.0192 260.187 85.2998  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
2.00000 w
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
164.000 71.0000 m
164.000 98.0000 l
164.000 100.209 165.791 102.000 168.000 102.000  c
277.000 102.000 l
279.209 102.000 281.000 100.209 281.000 98.0000  c
281.000 71.0000 l
281.000 68.7909 279.209 67.0000 277.000 67.0000  c
168.000 67.0000 l
165.791 67.0000 164.000 68.7909 164.000 71.0000  c
h
S
1.00000 w
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
164.000 151.040 m
164.000 178.040 l
164.000 180.249 165.791 182.040 168.000 182.040  c
277.000 182.040 l
279.209 182.040 281.000 180.249 281.000 178.040  c
281.000 151.040 l
281.000 148.831 279.209 147.040 277.000 147.040  c
168.000 147.040 l
165.791 147.040 164.000 148.831 164.000 151.040  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
169.682 159.714 m
171.788 159.714 l
171.788 165.914 l
171.788 166.894 171.949 167.601 172.273 168.037  c
172.597 168.472 173.118 168.689 173.838 168.689  c
174.527 168.689 175.024 168.482 175.332 168.067  c
175.640 167.653 175.793 166.985 175.793 166.064  c
175.793 159.714 l
177.625 159.714 l
177.625 165.928 l
177.625 166.862 177.537 167.574 177.359 168.064  c
177.181 168.554 176.858 168.979 176.388 169.339  c
175.746 169.836 174.882 170.084 173.797 170.084  c
172.635 170.084 171.701 169.820 170.995 169.291  c
170.507 168.926 170.166 168.495 169.973 167.996  c
169.779 167.497 169.682 166.800 169.682 165.907  c
h
179.875 169.592 m
179.875 168.108 l
180.877 168.528 181.734 168.737 182.445 168.737  c
183.274 168.737 183.689 168.455 183.689 167.890  c
183.689 167.525 183.347 167.206 182.664 166.933  c
181.980 166.659 l
181.237 166.358 180.706 166.035 180.387 165.688  c
180.068 165.342 179.909 164.914 179.909 164.403  c
179.909 163.692 180.180 163.140 180.722 162.746  c
181.264 162.351 182.023 162.154 182.999 162.154  c
183.609 162.154 184.336 162.243 185.179 162.421  c
185.179 163.843 l
184.368 163.560 183.696 163.419 183.163 163.419  c
182.324 163.419 181.905 163.679 181.905 164.198  c
181.905 164.540 182.215 164.829 182.834 165.066  c
183.422 165.292 l
184.302 165.625 184.914 165.962 185.258 166.304  c
185.602 166.645 185.774 167.085 185.774 167.623  c
185.774 168.329 185.481 168.902 184.896 169.342  c
184.310 169.782 183.548 170.002 182.609 170.002  c
181.707 170.002 180.795 169.865 179.875 169.592  c
h
194.100 169.578 m
193.139 169.861 192.227 170.002 191.366 170.002  c
190.112 170.002 189.124 169.646 188.399 168.936  c
187.674 168.225 187.312 167.254 187.312 166.023  c
187.312 164.861 187.644 163.926 188.307 163.217  c
188.970 162.509 189.846 162.154 190.935 162.154  c
192.033 162.154 192.835 162.501 193.341 163.193  c
193.847 163.886 194.100 164.982 194.100 166.481  c
189.445 166.481 l
189.582 167.912 190.368 168.628 191.803 168.628  c
192.482 168.628 193.248 168.471 194.100 168.156  c
h
189.417 165.340 m
192.111 165.340 l
192.111 164.059 191.698 163.419 190.874 163.419  c
190.035 163.419 189.550 164.059 189.417 165.340  c
h
200.806 169.831 m
200.806 162.325 l
202.748 162.325 l
202.748 163.740 l
203.340 162.683 204.183 162.154 205.277 162.154  c
205.842 162.154 206.307 162.293 206.671 162.571  c
207.036 162.849 207.259 163.239 207.341 163.740  c
208.043 162.683 208.891 162.154 209.884 162.154  c
211.256 162.154 211.942 162.911 211.942 164.424  c
211.942 169.831 l
210.000 169.831 l
210.000 165.087 l
210.000 164.198 209.704 163.754 209.112 163.754  c
208.506 163.754 207.916 164.191 207.341 165.066  c
207.341 169.831 l
205.400 169.831 l
205.400 165.087 l
205.400 164.194 205.101 163.747 204.504 163.747  c
203.907 163.747 203.322 164.187 202.748 165.066  c
202.748 169.831 l
h
220.494 169.578 m
219.532 169.861 218.621 170.002 217.759 170.002  c
216.506 170.002 215.517 169.646 214.792 168.936  c
214.068 168.225 213.706 167.254 213.706 166.023  c
213.706 164.861 214.037 163.926 214.700 163.217  c
215.363 162.509 216.239 162.154 217.329 162.154  c
218.427 162.154 219.229 162.501 219.735 163.193  c
220.241 163.886 220.494 164.982 220.494 166.481  c
215.838 166.481 l
215.975 167.912 216.761 168.628 218.197 168.628  c
218.876 168.628 219.641 168.471 220.494 168.156  c
h
215.811 165.340 m
218.504 165.340 l
218.504 164.059 218.092 163.419 217.267 163.419  c
216.429 163.419 215.943 164.059 215.811 165.340  c
h
226.263 169.024 m
225.589 169.676 224.866 170.002 224.096 170.002  c
223.440 170.002 222.907 169.801 222.497 169.400  c
222.086 168.999 221.881 168.480 221.881 167.842  c
221.881 167.012 222.213 166.373 222.876 165.924  c
223.539 165.475 224.488 165.251 225.723 165.251  c
226.263 165.251 l
226.263 164.567 l
226.263 163.788 225.819 163.398 224.930 163.398  c
224.142 163.398 223.344 163.622 222.538 164.068  c
222.538 162.674 l
223.454 162.327 224.361 162.154 225.258 162.154  c
227.222 162.154 228.205 162.936 228.205 164.499  c
228.205 167.821 l
228.205 168.409 228.394 168.703 228.772 168.703  c
228.840 168.703 228.929 168.694 229.039 168.676  c
229.086 169.811 l
228.658 169.938 228.280 170.002 227.952 170.002  c
227.122 170.002 226.589 169.676 226.352 169.024  c
h
226.263 167.937 m
226.263 166.413 l
225.785 166.413 l
224.477 166.413 223.823 166.823 223.823 167.644  c
223.823 167.922 223.917 168.155 224.106 168.344  c
224.296 168.533 224.529 168.628 224.807 168.628  c
225.281 168.628 225.766 168.398 226.263 167.937  c
h
230.816 169.831 m
230.816 162.325 l
232.839 162.325 l
232.839 163.740 l
233.500 162.683 234.352 162.154 235.396 162.154  c
236.066 162.154 236.595 162.366 236.982 162.790  c
237.369 163.214 237.563 163.793 237.563 164.526  c
237.563 169.831 l
235.540 169.831 l
235.540 165.025 l
235.540 164.173 235.257 163.747 234.692 163.747  c
234.049 163.747 233.432 164.200 232.839 165.107  c
232.839 169.831 l
h
244.426 169.592 m
244.426 168.108 l
245.429 168.528 246.286 168.737 246.997 168.737  c
247.826 168.737 248.241 168.455 248.241 167.890  c
248.241 167.525 247.899 167.206 247.215 166.933  c
246.532 166.659 l
245.789 166.358 245.258 166.035 244.939 165.688  c
244.620 165.342 244.460 164.914 244.460 164.403  c
244.460 163.692 244.732 163.140 245.274 162.746  c
245.816 162.351 246.575 162.154 247.550 162.154  c
248.161 162.154 248.888 162.243 249.731 162.421  c
249.731 163.843 l
248.920 163.560 248.248 163.419 247.714 163.419  c
246.876 163.419 246.457 163.679 246.457 164.198  c
246.457 164.540 246.766 164.829 247.386 165.066  c
247.974 165.292 l
248.854 165.625 249.465 165.962 249.810 166.304  c
250.154 166.645 250.326 167.085 250.326 167.623  c
250.326 168.329 250.033 168.902 249.447 169.342  c
248.862 169.782 248.099 170.002 247.161 170.002  c
246.258 170.002 245.347 169.865 244.426 169.592  c
h
252.541 169.831 m
252.541 159.037 l
254.564 159.037 l
254.564 163.740 l
255.225 162.683 256.077 162.154 257.121 162.154  c
257.791 162.154 258.319 162.366 258.707 162.790  c
259.094 163.214 259.288 163.793 259.288 164.526  c
259.288 169.831 l
257.264 169.831 l
257.264 165.025 l
257.264 164.173 256.982 163.747 256.417 163.747  c
255.774 163.747 255.156 164.200 254.564 165.107  c
254.564 169.831 l
h
261.735 169.831 m
261.735 162.325 l
263.758 162.325 l
263.758 169.831 l
h
261.735 161.061 m
261.735 159.372 l
263.758 159.372 l
263.758 161.061 l
h
266.500 169.831 m
266.500 163.590 l
265.467 163.590 l
265.467 162.325 l
266.500 162.325 l
266.500 161.785 l
266.500 159.839 267.422 158.866 269.268 158.866  c
269.865 158.866 270.480 158.953 271.114 159.126  c
271.114 160.493 l
270.540 160.252 270.025 160.131 269.569 160.131  c
268.872 160.131 268.523 160.657 268.523 161.710  c
268.523 162.325 l
270.423 162.325 l
270.423 163.590 l
268.523 163.590 l
268.523 169.831 l
h
275.960 169.790 m
275.477 169.931 275.097 170.002 274.819 170.002  c
273.064 170.002 272.187 169.182 272.187 167.541  c
272.187 163.590 l
271.346 163.590 l
271.346 162.325 l
272.187 162.325 l
272.187 161.061 l
274.210 160.828 l
274.210 162.325 l
275.817 162.325 l
275.817 163.590 l
274.210 163.590 l
274.210 167.274 l
274.210 168.195 274.586 168.655 275.338 168.655  c
275.512 168.655 275.719 168.623 275.960 168.560  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
2.00000 w
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
164.000 151.040 m
164.000 178.040 l
164.000 180.249 165.791 182.040 168.000 182.040  c
277.000 182.040 l
279.209 182.040 281.000 180.249 281.000 178.040  c
281.000 151.040 l
281.000 148.831 279.209 147.040 277.000 147.040  c
168.000 147.040 l
165.791 147.040 164.000 148.831 164.000 151.040  c
h
S
1.00000 w
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
newpath
164.000 231.080 m
164.000 258.080 l
164.000 260.289 165.791 262.080 168.000 262.080  c
277.000 262.080 l
279.209 262.080 281.000 260.289 281.000 258.080  c
281.000 231.080 l
281.000 228.871 279.209 227.080 277.000 227.080  c
168.000 227.080 l
165.791 227.080 164.000 228.871 164.000 231.080  c
h
f
0.00000 0.00000 0.00000 RG
0 J
1.45000 M
newpath
193.365 249.871 m
193.365 239.754 l
199.688 239.754 l
199.688 241.142 l
195.471 241.142 l
195.471 243.965 l
198.930 243.965 l
198.930 245.318 l
195.471 245.318 l
195.471 248.435 l
200.010 248.435 l
200.010 249.871 l
h
203.626 249.871 m
200.762 242.365 l
202.895 242.365 l
204.993 247.779 l
207.078 242.365 l
208.541 242.365 l
205.649 249.871 l
h
213.757 249.064 m
213.082 249.716 212.360 250.042 211.590 250.042  c
210.934 250.042 210.400 249.841 209.990 249.440  c
209.580 249.039 209.375 248.520 209.375 247.882  c
209.375 247.052 209.707 246.413 210.370 245.964  c
211.033 245.515 211.982 245.291 213.217 245.291  c
213.757 245.291 l
213.757 244.607 l
213.757 243.828 213.312 243.438 212.424 243.438  c
211.635 243.438 210.838 243.662 210.031 244.108  c
210.031 242.714 l
210.947 242.367 211.854 242.194 212.752 242.194  c
214.716 242.194 215.698 242.976 215.698 244.539  c
215.698 247.861 l
215.698 248.449 215.887 248.743 216.266 248.743  c
216.334 248.743 216.423 248.734 216.532 248.716  c
216.580 249.851 l
216.152 249.978 215.773 250.042 215.445 250.042  c
214.616 250.042 214.083 249.716 213.846 249.064  c
h
213.757 247.977 m
213.757 246.453 l
213.278 246.453 l
211.970 246.453 211.316 246.863 211.316 247.684  c
211.316 247.962 211.411 248.195 211.600 248.384  c
211.789 248.573 212.023 248.668 212.301 248.668  c
212.775 248.668 213.260 248.438 213.757 247.977  c
h
218.310 249.871 m
218.310 239.077 l
220.333 239.077 l
220.333 249.871 l
h
227.504 249.871 m
227.504 248.456 l
226.848 249.513 225.995 250.042 224.947 250.042  c
224.277 250.042 223.749 249.830 223.361 249.406  c
222.974 248.982 222.780 248.404 222.780 247.670  c
222.780 242.365 l
224.804 242.365 l
224.804 247.171 l
224.804 248.023 225.089 248.449 225.658 248.449  c
226.296 248.449 226.911 247.996 227.504 247.089  c
227.504 242.365 l
229.527 242.365 l
229.527 249.871 l
h
235.734 249.064 m
235.060 249.716 234.338 250.042 233.567 250.042  c
232.911 250.042 232.378 249.841 231.968 249.440  c
231.558 249.039 231.353 248.520 231.353 247.882  c
231.353 247.052 231.684 246.413 232.347 245.964  c
233.010 245.515 233.959 245.291 235.194 245.291  c
235.734 245.291 l
235.734 244.607 l
235.734 243.828 235.290 243.438 234.401 243.438  c
233.613 243.438 232.815 243.662 232.009 244.108  c
232.009 242.714 l
232.925 242.367 233.832 242.194 234.729 242.194  c
236.694 242.194 237.676 242.976 237.676 244.539  c
237.676 247.861 l
237.676 248.449 237.865 248.743 238.243 248.743  c
238.312 248.743 238.400 248.734 238.510 248.716  c
238.558 249.851 l
238.129 249.978 237.751 250.042 237.423 250.042  c
236.593 250.042 236.060 249.716 235.823 249.064  c
h
235.734 247.977 m
235.734 246.453 l
235.256 246.453 l
233.948 246.453 233.294 246.863 233.294 247.684  c
233.294 247.962 233.389 248.195 233.578 248.384  c
233.767 248.573 234.000 248.668 234.278 248.668  c
234.752 248.668 235.238 248.438 235.734 247.977  c
h
244.156 249.830 m
243.673 249.971 243.293 250.042 243.015 250.042  c
241.260 250.042 240.383 249.222 240.383 247.581  c
240.383 243.630 l
239.542 243.630 l
239.542 242.365 l
240.383 242.365 l
240.383 241.101 l
242.406 240.868 l
242.406 242.365 l
244.013 242.365 l
244.013 243.630 l
242.406 243.630 l
242.406 247.314 l
242.406 248.235 242.782 248.695 243.534 248.695  c
243.707 248.695 243.915 248.663 244.156 248.600  c
h
252.072 249.618 m
251.111 249.901 250.199 250.042 249.338 250.042  c
248.085 250.042 247.096 249.686 246.371 248.976  c
245.646 248.265 245.284 247.294 245.284 246.063  c
245.284 244.901 245.616 243.966 246.279 243.257  c
246.942 242.549 247.818 242.194 248.907 242.194  c
250.006 242.194 250.808 242.541 251.313 243.233  c
251.819 243.926 252.072 245.022 252.072 246.521  c
247.417 246.521 l
247.554 247.952 248.340 248.668 249.775 248.668  c
250.454 248.668 251.220 248.511 252.072 248.196  c
h
247.390 245.380 m
250.083 245.380 l
250.083 244.099 249.671 243.459 248.846 243.459  c
248.007 243.459 247.522 244.099 247.390 245.380  c
h
f
2 J
10.0000 M
1.00000 1.00000 1.00000 RG
2.00000 w
0 J
1.45000 M
0.00000 0.00000 0.00000 RG
newpath
164.000 231.080 m
164.000 258.080 l
164.000 260.289 165.791 262.080 168.000 262.080  c
277.000 262.080 l
279.209 262.080 281.000 260.289 281.000 258.080  c
281.000 231.080 l
281.000 228.871 279.209 227.080 277.000 227.080  c
168.000 227.080 l
165.791 227.080 164.000 228.871 164.000 231.080  c
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
222.500 101.970 m
222.500 124.520 l
222.500 124.520 l
222.500 139.070 l
S
newpath
222.500 147.070 m
227.500 135.070 l
222.500 138.070 l
217.500 135.070 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
222.500 182.010 m
222.500 219.074 l
S
newpath
222.500 227.074 m
227.500 215.074 l
222.500 218.074 l
217.500 215.074 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
